* async_interface_promise_example
:PROPERTIES:
:CUSTOM_ID: async_interface_promise_example
:END:
This project demonstrates how TypeScript interfaces, async functions, and promises work together.

** Concepts Demonstrated
- Defining interfaces with async methods that return promises
- Implementing interfaces with async/await syntax
- Type-safe promise handling with generics
- Error handling with async/await and promise chains
- Promise-based API design patterns
- Promise composition techniques (Promise.all, Promise.allSettled, Promise.race)

** Promise Composition
The example includes demonstrations of three major Promise composition patterns:

*** Promise.all
Executes multiple promises in parallel and waits for all to complete successfully.
- Returns a single promise that resolves when all input promises resolve
- Result is an array containing the resolved values of each promise
- If any promise rejects, the entire Promise.all rejects immediately

#+begin_src typescript
// Example of Promise.all
const parallelResults = await Promise.all(arrayOfPromises);
#+end_src

*** Promise.allSettled
Similar to Promise.all but waits for all promises to complete regardless of success/failure.
- Returns a single promise that always resolves once all promises complete
- Result is an array of objects with status ('fulfilled' or 'rejected') and value/reason
- Never rejects, making it ideal for handling multiple operations where some may fail

#+begin_src typescript
// Example of Promise.allSettled
const mixedResults = await Promise.allSettled(arrayOfPromises);
#+end_src

*** Promise.race
Returns the result of the first promise to resolve or reject.
- Useful for implementing timeouts or selecting the fastest responding resource
- Result is the value of the first promise to complete
- Rejects if the first promise to complete rejects

#+begin_src typescript
// Example of Promise.race
const fastestResult = await Promise.race(arrayOfPromises);
#+end_src

** Running the Example
To install dependencies:

#+begin_src sh
bun install
#+end_src

To run:

#+begin_src sh
bun run src/main.ts
#+end_src

** Project Structure
- ~src/main.ts~ - Contains the main example code demonstrating interfaces with async/await and promises

** Key Takeaways
- Interfaces can define methods that return Promises
- Async methods automatically return Promises
- TypeScript's generic system works well with Promises for type safety
- Both async/await and promise chaining can be used with interface implementations
- Promise composition methods (Promise.all, Promise.allSettled, Promise.race) handle multiple promises
- Type safety can be maintained across complex promise patterns

This project was created using =bun init= in bun v1.1.40.
[[https://bun.sh][Bun]] is a fast all-in-one JavaScript runtime.
