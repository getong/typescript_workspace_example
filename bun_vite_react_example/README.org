* React + TypeScript + Vite
:PROPERTIES:
:CUSTOM_ID: react-typescript-vite
:END:
This template provides a minimal setup to get React working in Vite with
HMR and some ESLint rules.

Currently, two official plugins are available:

- [[https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md][[cite/t:@vitejs/plugin-react]]]
  uses [[https://babeljs.io/][Babel]] for Fast Refresh
- [[https://github.com/vitejs/vite-plugin-react-swc][[cite/t:@vitejs/plugin-react-swc]]]
  uses [[https://swc.rs/][SWC]] for Fast Refresh

** Expanding the ESLint configuration
:PROPERTIES:
:CUSTOM_ID: expanding-the-eslint-configuration
:END:
If you are developing a production application, we recommend updating
the configuration to enable type aware lint rules:

- Configure the top-level =parserOptions= property like this:

#+begin_src js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
#+end_src

- Replace =tseslint.configs.recommended= to
  =tseslint.configs.recommendedTypeChecked= or
  =tseslint.configs.strictTypeChecked=
- Optionally add =...tseslint.configs.stylisticTypeChecked=
- Install
  [[https://github.com/jsx-eslint/eslint-plugin-react][eslint-plugin-react]]
  and update the config:

#+begin_src js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
#+end_src

** Project Features
:PROPERTIES:
:CUSTOM_ID: project-features
:END:

*** Custom React Hooks
:PROPERTIES:
:CUSTOM_ID: custom-react-hooks
:END:

**** useCounter Hook
:PROPERTIES:
:CUSTOM_ID: usecounter-hook
:END:

A custom React hook that provides counter functionality:

- Located in =src/hooks/useCounter.ts=
- Provides =count=, =increment=, =decrement=, and =reset= functions
- Accepts an optional =initialValue= parameter (defaults to 0)

**** useFetch Hook
:PROPERTIES:
:CUSTOM_ID: usefetch-hook
:END:

A custom React hook for fetching data from APIs:

- Located in =src/hooks/useFetch.ts=
- Manages loading state, errors, and successful data fetches
- Includes proper cleanup with AbortController
- Returns =data=, =loading=, and =error= states

Example usage:

#+begin_src tsx
import useFetch from '../hooks/useFetch';

function UsersList() {
  const { data, loading, error } = useFetch('https://jsonplaceholder.typicode.com/users');
  
  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;
  
  return (
    <ul>
      {data.map(user => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}
#+end_src

**** useWindowWidth Hook
:PROPERTIES:
:CUSTOM_ID: usewindowwidth-hook
:END:

A custom React hook that tracks the browser window width:

- Located in =src/hooks/useWindowWidth.ts=
- Returns the current window width
- Automatically updates when window is resized
- Cleans up event listeners on component unmount

*** React Context
:PROPERTIES:
:CUSTOM_ID: react-context
:END:

**** ThemeContext
:PROPERTIES:
:CUSTOM_ID: themecontext
:END:

A React context for theme management:

- Located in =src/context/ThemeContext.ts=
- Provides theme information to components without prop drilling
- Default value is 'light'

Example usage:

#+begin_src tsx
import { useContext } from 'react';
import ThemeContext from '../context/ThemeContext';

function ThemedComponent() {
  const theme = useContext(ThemeContext);
  return <div className={`themed-component ${theme}`}>Current theme: {theme}</div>;
}
#+end_src

*** Higher-Order Components
:PROPERTIES:
:CUSTOM_ID: higher-order-components
:END:

**** withAuthProtection HOC
:PROPERTIES:
:CUSTOM_ID: withauthorprotection-hoc
:END:

A Higher-Order Component for protecting routes that require authentication:

- Located in =src/hoc/withAuthProtection.tsx=
- Checks for an auth token in localStorage
- Shows a login prompt if user is not authenticated
- Renders the wrapped component if user is authenticated

Example usage:

#+begin_src tsx
import withAuthProtection from '../hoc/withAuthProtection';

function SecurePage() {
  return <div>This is a secure page that only authenticated users can see.</div>;
}

export default withAuthProtection(SecurePage);
#+end_src

*** Components
:PROPERTIES:
:CUSTOM_ID: components
:END:

**** CounterComponent
:PROPERTIES:
:CUSTOM_ID: countercomponent
:END:

A React component that uses the =useCounter= hook:
- Located in =src/components/CounterComponent.tsx=
- Displays the current count and buttons for actions
- Uses the =useCounter= hook with an initial value of 5

**** CounterPage
:PROPERTIES:
:CUSTOM_ID: counterpage
:END:

A page that displays the Counter demonstration:
- Located in =src/pages/CounterPage.tsx= 
- Accessible from the main application via the "Go to Counter Page" button

**** ProtectedThemePage
:PROPERTIES:
:CUSTOM_ID: protectedthemepage
:END:

A page that demonstrates both authentication and theme context:
- Located in =src/pages/ProtectedThemePage.tsx=
- Protected by the withAuthProtection HOC
- Uses ThemeContext to demonstrate theming
- Includes theme switching functionality
- Shows authentication status and login/logout controls

*** React Patterns
:PROPERTIES:
:CUSTOM_ID: react-patterns
:END:

**** Render Props Pattern
:PROPERTIES:
:CUSTOM_ID: render-props-pattern
:END:

The application demonstrates the "Render Props" pattern with the MouseTracker component:

- Located in =src/components/MouseTracker.tsx=
- Uses class component with state for mouse position tracking
- Implements the render prop pattern to share mouse position state with any component
- Allows flexible rendering of mouse tracking information

Example usage:

#+begin_src tsx
import MouseTracker from '../components/MouseTracker';

function MyComponent() {
  return (
    <MouseTracker
      render={({ x, y }) => (
        <div>Mouse position: {x}, {y}</div>
      )}
    />
  );
}
#+end_src

**** Children as Function Pattern
:PROPERTIES:
:CUSTOM_ID: children-as-function-pattern
:END:

The application also demonstrates the "Children as Function" pattern (a variation of render props):

- Located in =src/components/ChildrenMouseTracker.tsx=
- Similar to render props but uses the children prop as a function
- Often considered more elegant than the standard render prop pattern
- Provides the same capabilities with a cleaner JSX syntax

Example usage:

#+begin_src tsx
import ChildrenMouseTracker from '../components/ChildrenMouseTracker';

function MyComponent() {
  return (
    <ChildrenMouseTracker>
      {({ x, y }) => (
        <div>Mouse position: {x}, {y}</div>
      )}
    </ChildrenMouseTracker>
  );
}
#+end_src

*** Running the Project
:PROPERTIES:
:CUSTOM_ID: running-the-project
:END:

To run the project locally:

#+begin_src bash
# Install dependencies
bun install

# Start development server
bun run dev
#+end_src

Navigate to the displayed URL (typically http://localhost:5173) in your browser.

*** Project Structure
:PROPERTIES:
:CUSTOM_ID: project-structure
:END:

- =src/hooks/= - Custom React hooks
- =src/components/= - Reusable React components
- =src/pages/= - Page-level components
- =src/assets/= - Static assets like images and SVGs
- =src/context/= - React context definitions
- =src/hoc/= - Higher-Order Components
- =src/api/= - API service functions
