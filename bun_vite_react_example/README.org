* React + TypeScript + Vite
:PROPERTIES:
:CUSTOM_ID: react-typescript-vite
:END:
This template provides a minimal setup to get React working in Vite with
HMR and some ESLint rules.

Currently, two official plugins are available:

- [[https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md][[cite/t:@vitejs/plugin-react]]]
  uses [[https://babeljs.io/][Babel]] for Fast Refresh
- [[https://github.com/vitejs/vite-plugin-react-swc][[cite/t:@vitejs/plugin-react-swc]]]
  uses [[https://swc.rs/][SWC]] for Fast Refresh

** Expanding the ESLint configuration
:PROPERTIES:
:CUSTOM_ID: expanding-the-eslint-configuration
:END:
If you are developing a production application, we recommend updating
the configuration to enable type aware lint rules:

- Configure the top-level =parserOptions= property like this:

#+begin_src js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
#+end_src

- Replace =tseslint.configs.recommended= to
  =tseslint.configs.recommendedTypeChecked= or
  =tseslint.configs.strictTypeChecked=
- Optionally add =...tseslint.configs.stylisticTypeChecked=
- Install
  [[https://github.com/jsx-eslint/eslint-plugin-react][eslint-plugin-react]]
  and update the config:

#+begin_src js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
#+end_src

** Project Features
:PROPERTIES:
:CUSTOM_ID: project-features
:END:

*** Custom React Hooks
:PROPERTIES:
:CUSTOM_ID: custom-react-hooks
:END:

**** useCounter Hook
:PROPERTIES:
:CUSTOM_ID: usecounter-hook
:END:

A custom React hook that provides counter functionality:

- Located in =src/hooks/useCounter.ts=
- Provides =count=, =increment=, =decrement=, and =reset= functions
- Accepts an optional =initialValue= parameter (defaults to 0)

**** useFetch Hook
:PROPERTIES:
:CUSTOM_ID: usefetch-hook
:END:

A custom React hook for fetching data from APIs:

- Located in =src/hooks/useFetch.ts=
- Manages loading state, errors, and successful data fetches
- Includes proper cleanup with AbortController
- Returns =data=, =loading=, and =error= states

Example usage:

#+begin_src tsx
import useFetch from '../hooks/useFetch';

function UsersList() {
  const { data, loading, error } = useFetch('https://jsonplaceholder.typicode.com/users');
  
  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;
  
  return (
    <ul>
      {data.map(user => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}
#+end_src

*** Components
:PROPERTIES:
:CUSTOM_ID: components
:END:

**** CounterComponent
:PROPERTIES:
:CUSTOM_ID: countercomponent
:END:

A React component that uses the =useCounter= hook:
- Located in =src/components/CounterComponent.tsx=
- Displays the current count and buttons for actions
- Uses the =useCounter= hook with an initial value of 5

**** CounterPage
:PROPERTIES:
:CUSTOM_ID: counterpage
:END:

A page that displays the Counter demonstration:
- Located in =src/pages/CounterPage.tsx= 
- Accessible from the main application via the "Go to Counter Page" button

*** Running the Project
:PROPERTIES:
:CUSTOM_ID: running-the-project
:END:

To run the project locally:

#+begin_src bash
# Install dependencies
bun install

# Start development server
bun run dev
#+end_src

Navigate to the displayed URL (typically http://localhost:5173) in your browser.

*** Project Structure
:PROPERTIES:
:CUSTOM_ID: project-structure
:END:

- =src/hooks/= - Custom React hooks
- =src/components/= - Reusable React components
- =src/pages/= - Page-level components
- =src/assets/= - Static assets like images and SVGs
