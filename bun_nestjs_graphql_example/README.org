* bun_nestjs_graphql_example
:PROPERTIES:
:CUSTOM_ID: bun_nestjs_graphql_example
:END:
To install dependencies:

#+begin_src sh
bun install
#+end_src

To initialize the database with sample data:

#+begin_src sh
bun run init:db
#+end_src

To run the application:

#+begin_src sh
bun run start:dev
#+end_src

To clean the database and reinitialize:

#+begin_src sh
bun run clean:db
#+end_src

You can access:
- GraphQL Playground: http://localhost:3010/graphql
- Client UI Example: http://localhost:3010/graphql-client.html

This project was created using =bun init= in bun v1.1.42.
[[https://bun.sh][Bun]] is a fast all-in-one JavaScript runtime.

** add madge

#+begin_src shell
bun add -D madge
bunx madge src/main.tsx --image graph.png
bunx madge src/main.tsx --circular
#+end_src

** typeorm usage

#+begin_src shell
bun typeorm init --database postgresql

bun typeorm migration:create src/migration/PostRefactoring
#+end_src

** Awesome Project Build with TypeORM
:PROPERTIES:
:CUSTOM_ID: awesome-project-build-with-typeorm
:END:
Steps to run this project:

1. Run =npm i= command
2. Setup database settings inside =data-source.ts= file
3. Run =npm start= command

** Project Structure
:PROPERTIES:
:CUSTOM_ID: project-structure
:END:
This project follows a modular architecture with the following structure:

- =src/= - Main source directory
  - =users/= - User module (GraphQL and REST endpoints)
  - =notes/= - Notes module (GraphQL endpoints)
  - =database/= - Database configuration and seeder
  - =graphql/= - GraphQL configuration
  - =typeorm/= - TypeORM configuration
  - =main.tsx= - Application entry point

** API Documentation
:PROPERTIES:
:CUSTOM_ID: api-documentation
:END:
*** REST Endpoints
:PROPERTIES:
:CUSTOM_ID: rest-endpoints
:END:
The project includes REST API endpoints for the Users resource:

| Method | Endpoint     | Description         | Response Codes                |
|--------+-------------+---------------------+------------------------------|
| GET    | /users      | Get all users       | 200 OK                       |
| GET    | /users/:id  | Get specific user   | 200 OK, 404 Not Found        |
| POST   | /users      | Create a new user   | 201 Created, 400 Bad Request |
| HEAD   | /users/:id  | Check user exists   | 200 OK, 404 Not Found        |
| DELETE | /users/:id  | Delete a user       | 204 No Content, 404 Not Found|

*** GraphQL API
:PROPERTIES:
:CUSTOM_ID: graphql-api
:END:
The GraphQL API provides full CRUD operations for both Users and Notes:

**** Users Query/Mutation Examples:
#+begin_src graphql
# Get all users
query {
  users {
    id
    name
    email
  }
}

# Get specific user
query {
  user(id: 1) {
    id
    name
    email
  }
}

# Create user
mutation {
  createUser(createUserInput: {
    name: "John Doe",
    email: "john@example.com"
  }) {
    id
    name
    email
  }
}
#+end_src

** Middleware Usage
:PROPERTIES:
:CUSTOM_ID: middleware-usage
:END:

*** create middleware via cli:

#+begin_src shell
bun nest generate middleware users/middlewares/example

bun nest generate middleware users/middlewares/another
#+end_src

This project demonstrates NestJS middleware with the Users module:

#+begin_src typescript
// Example middleware in users/middlewares/example/example.middleware.ts
@Injectable()
export class ExampleMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    // Log incoming requests
    console.log(`${req.method} ${req.path}`);
    // Add timestamp
    req['timestamp'] = new Date().toISOString();
    next();
  }
}
#+end_src

To create your own middleware:

1. Create a new middleware file in the appropriate module directory
2. Implement the =NestMiddleware= interface
3. Register your middleware in the module's =configure()= method

** Development Commands
:PROPERTIES:
:CUSTOM_ID: development-commands
:END:
| Command                | Description                               |
|------------------------+------------------------------------------|
| =bun run format=       | Format code with Prettier                |
| =bun run start:dev=    | Start development server with hot reload |
| =bun run lint=         | Run ESLint to check code quality         |
| =bun run init:db=      | Initialize database with sample data     |
| =bun run clean:db=     | Clean and reinitialize database          |
