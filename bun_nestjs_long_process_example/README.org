* bun_nestjs_long_process_example
:PROPERTIES:
:CUSTOM_ID: bun_nestjs_long_process_example
:END:
To install dependencies:

#+begin_src sh
bun install
#+end_src

To run:

#+begin_src sh
bun run src/main.ts
#+end_src

This project was created using =bun init= in bun v1.1.42.
[[https://bun.sh][Bun]] is a fast all-in-one JavaScript runtime.

* Project Overview
:PROPERTIES:
:CUSTOM_ID: project-overview
:END:

This project demonstrates how to handle long-running tasks in NestJS without blocking the main thread using worker threads.

* Step by Step Guide
:PROPERTIES:
:CUSTOM_ID: step-by-step-guide
:END:

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

1. Clone the repository
2. Install dependencies:
   #+begin_src sh
   bun install
   #+end_src

** Running the Application
:PROPERTIES:
:CUSTOM_ID: running-the-application
:END:

1. Start the NestJS application:
   #+begin_src sh
   bun run start
   # or directly with
   bun run src/main.ts
   #+end_src

2. The server will be running at http://localhost:3000

** Project Structure
:PROPERTIES:
:CUSTOM_ID: project-structure
:END:

- =src/main.ts= - NestJS application bootstrap
- =src/app.module.ts= - Root module configuration
- =src/long-process.controller.ts= - Controller to handle API requests
- =src/long-process.service.ts= - Service to manage long-running tasks
- =src/workers/long-process.worker.ts= - Worker thread implementation for CPU-intensive tasks

** Implementation Details
:PROPERTIES:
:CUSTOM_ID: implementation-details
:END:

*** Communication Flow
:PROPERTIES:
:CUSTOM_ID: communication-flow
:END:

The application follows this communication pattern:

#+begin_src
┌──────────┐      ┌──────────────────┐      ┌───────────────────┐      ┌─────────────────┐
│          │      │                  │      │                   │      │                 │
│  Client  │ HTTP │    Controller    │ Call │      Service      │ Fork │  Worker Thread  │
│          │─────>│                  │─────>│                   │─────>│                 │
└──────────┘      └──────────────────┘      └───────────────────┘      └─────────────────┘
     │                     │                        │                          │
     │                     │                        │                          │
     │                     │                        │       (Processing)       │
     │                     │                        │                          │
     │                     │                        │      postMessage()       │
     │                     │                        │<─────────────────────────┘
     │   HTTP Response     │      Return Status     │
     │<────────────────────│<───────────────────────┘
     │                     │                        
     │   Poll Status       │                        
     │─────────────────────>                        
     │                     │                        
     │                     │─────┐                  
     │                     │     │ Check Status     
     │                     │<────┘                  
     │                     │                        
     │   Status Response   │                        
     │<────────────────────│                        
#+end_src

*** Implementation Steps
:PROPERTIES:
:CUSTOM_ID: implementation-steps
:END:

Here's how the components work together:

1. *Controller Layer (API Endpoints)*
   - Exposes REST endpoints for clients to start tasks and check status
   - Maps HTTP requests to service methods
   - Example:
     #+begin_src typescript
     @Post("start")
     async startLongProcess(@Body() body: { duration: number }) {
       const taskId = await this.longProcessService.startLongRunningTask(body.duration);
       return { taskId, message: "Task started" };
     }
     #+end_src

2. *Service Layer (Task Management)*
   - Maintains an in-memory map of tasks and their statuses
   - Creates and manages worker threads
   - Sets up communication channels with workers
   - Example:
     #+begin_src typescript
     async startLongRunningTask(duration: number): Promise<string> {
       const taskId = uuidv4();
       this.tasks.set(taskId, { status: "pending" });
       
       const worker = new Worker(join(__dirname, "workers", "long-process.worker.js"), {
         workerData: { duration },
       });
       
       worker.on("message", (result) => {
         this.tasks.set(taskId, { status: "completed", result });
       });
       
       return taskId;
     }
     #+end_src

3. *Worker Thread (Heavy Computation)*
   - Runs in a separate thread to avoid blocking Node.js event loop
   - Receives parameters via workerData
   - Returns results via parentPort.postMessage()
   - Example:
     #+begin_src typescript
     import { parentPort, workerData } from "worker_threads";
     
     const { duration } = workerData;
     
     // Simulate heavy work
     function heavyComputation(duration: number) {
       const startTime = Date.now();
       while (Date.now() - startTime < duration * 1000) {
         // CPU-intensive work
       }
       return { processedAt: new Date().toISOString(), duration: `${duration} seconds` };
     }
     
     const result = heavyComputation(duration);
     
     // Send result back to main thread
     if (parentPort) {
       parentPort.postMessage(result);
     }
     #+end_src

4. *Client Interaction*
   - Clients start processes via POST request
   - Receive task ID immediately
   - Poll status endpoint to check completion
   - Retrieve results when task is complete

This architecture allows handling CPU-intensive tasks without compromising API responsiveness.

** How It Works
:PROPERTIES:
:CUSTOM_ID: how-it-works
:END:

1. When a request comes in to start a long process, the service creates a unique task ID
2. A worker thread is spawned to handle the heavy computation
3. The main thread immediately returns the task ID to the client
4. The client can poll the status endpoint to check if the task is complete
5. When the worker finishes, it sends the result back to the main thread

* Testing the Code
:PROPERTIES:
:CUSTOM_ID: testing-the-code
:END:

** Starting a Long-Running Task
:PROPERTIES:
:CUSTOM_ID: starting-a-task
:END:

Use the POST endpoint to start a new task:

#+begin_src sh
curl -X POST http://localhost:3000/long-process/start \
  -H "Content-Type: application/json" \
  -d '{"duration": 10}'
#+end_src

This will return a task ID like:
#+begin_src json
{"taskId":"123e4567-e89b-12d3-a456-426614174000","message":"Task started"}
#+end_src

** Checking Task Status
:PROPERTIES:
:CUSTOM_ID: checking-status
:END:

Use the GET endpoint with your task ID to check the status:

#+begin_src sh
curl -X GET http://localhost:3000/long-process/status/123e4567-e89b-12d3-a456-426614174000
#+end_src

While the task is running, you'll receive:
#+begin_src json
{"taskId":"123e4567-e89b-12d3-a456-426614174000","status":{"status":"pending"}}
#+end_src

After completion, you'll receive:
#+begin_src json
{
  "taskId":"123e4567-e89b-12d3-a456-426614174000",
  "status":{
    "status":"completed",
    "result":{
      "processedAt":"2023-07-10T12:34:56.789Z",
      "duration":"10 seconds",
      "message":"Long-running task completed successfully"
    }
  }
}
#+end_src

** Example Workflow
:PROPERTIES:
:CUSTOM_ID: example-workflow
:END:

1. Start a task with a 30-second duration:
   #+begin_src sh
   curl -X POST http://localhost:3000/long-process/start \
     -H "Content-Type: application/json" \
     -d '{"duration": 30}'
   #+end_src

2. Save the returned taskId:
   #+begin_src json
   {"taskId":"8c654137-73b5-48fb-aebc-bc9a5e18ed2f","message":"Task started"}
   #+end_src

3. Check status after 10 seconds:
   #+begin_src sh
   curl -X GET http://localhost:3000/long-process/status/8c654137-73b5-48fb-aebc-bc9a5e18ed2f
   #+end_src
   
   Response:
   #+begin_src json
   {"taskId":"8c654137-73b5-48fb-aebc-bc9a5e18ed2f","status":{"status":"pending"}}
   #+end_src

4. Check again after 30+ seconds:
   #+begin_src sh
   curl -X GET http://localhost:3000/long-process/status/8c654137-73b5-48fb-aebc-bc9a5e18ed2f
   #+end_src
   
   Response (task completed):
   #+begin_src json
   {
     "taskId":"8c654137-73b5-48fb-aebc-bc9a5e18ed2f",
     "status":{
       "status":"completed",
       "result":{
         "processedAt":"2023-07-10T12:45:30.123Z",
         "duration":"30 seconds",
         "message":"Long-running task completed successfully"
       }
     }
   }
   #+end_src

* Troubleshooting
:PROPERTIES:
:CUSTOM_ID: troubleshooting
:END:

** Common Issues

- *Task Not Found Error*: Ensure you're using the correct task ID in the status endpoint.
- *Worker Errors*: Check server logs for details about worker thread failures.
- *Compilation Errors*: Make sure TypeScript is properly transpiling worker files to JavaScript.

** Debugging Tips

- Worker files must be compiled to JavaScript before use. The path in =long-process.service.ts= should point to the JS file:
  #+begin_src typescript
  const worker = new Worker(join(__dirname, "workers", "long-process.worker.js"), {...});
  #+end_src

- If you modify worker files, make sure to rebuild the project:
  #+begin_src sh
  bun run build
  #+end_src

* Best Practices
:PROPERTIES:
:CUSTOM_ID: best-practices
:END:

- Set reasonable timeouts for your worker threads
- Implement proper error handling in both the main thread and workers
- Consider adding a cleanup mechanism for completed tasks to prevent memory leaks
- For production, implement a more robust task queue system like Bull/BullMQ
- Add rate limiting to prevent resource exhaustion from too many concurrent tasks

* Advantages
:PROPERTIES:
:CUSTOM_ID: advantages
:END:

- Main thread remains responsive during heavy computations
- Clients get immediate response with task tracking capability
- Worker threads isolate computational work
- Easy to scale by adding more workers or implementing a queue
